def run(script)
  puts "\n> #{script}".yellow
  sh script
end



lane :update_signing do
  match(type: 'appstore')
end

lane :setup_signing do
  match(type: 'appstore', readonly: true)
end

lane :stamp_plist do
  plist = 'emission/Example/Emission/Info.plist'

  # Increment build number to current date
  build_number = Time.new.strftime('%Y.%m.%d.%H')
  `/usr/libexec/PlistBuddy -c "Set CFBundleVersion #{build_number}" "#{plist}"`
end

lane :validate do
  unless ENV['FASTLANE_USERNAME'] && ENV['FASTLANE_PASSWORD'] && ENV['MATCH_PASSWORD']
    raise 'You need to set FASTLANE_USERNAME, FASTLANE_PASSWORD and MATCH_PASSWORD in your environment'
  end

  unless ENV['GITHUB_SUBMODULES_USER']
    raise 'You need to set GITHUB_SUBMODULES_USER in your environment'
  end

  unless ENV['SLACK_URL']
    raise "You need to set SLACK_URL (#{ENV['SLACK_URL']}) in your environment."
  end
end

lane :build do
  gym workspace: 'fastlane/emission/Example/Emission.xcworkspace',
      configuration: 'Deploy',
      scheme: 'Emission',
      clean: true
end

lane :ship do
  validate
  setup_signing
  stamp_plist

  build

  changelog = 'emission/CHANGELOG.md'
  upcoming_release_notes = File.read(changelog).lines[0...12].join("\n")

  # Log into iTunes connection, get the latest version of the app we shipped, and how many builds we've sent too
  Spaceship::Tunes.login(ENV['FASTLANE_USERNAME'], ENV['FASTLANE_PASSWORD'])
  app = Spaceship::Tunes::Application.find('net.artsy.Emission')
  latest_version = app.build_trains.keys.sort.last
  train = app.build_trains[latest_version]
  build_version = train.builds.count + 1

  # Do a tag, we use a http git remote so we can have push access
  # as the default remote for circle is read-only
  tag = "deploy-#{latest_version}-#{build_version}"
  `git tag -d "#{tag}"`

  add_git_tag tag: tag
  `git remote add http https://github.com/artsy/emission.git`
  `git push http #{tag}`

  pilot changelog: release_notes

  slack message: 'There is a new Emission beta available. Grab it from Testflight on your iOS device.',
        payload: {
          'Version' => latest_version,
          "What's new" => upcoming_release_notes
        },
        default_payloads: []
end

# If the weekly task fails, then ship a message
error do |_, exception|
  # slack message: "Error Deploying Emission: #{exception}",
  #       success: false,
  #       payload: { Output: exception.error_info.to_s }
end
